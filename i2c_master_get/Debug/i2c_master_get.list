
i2c_master_get.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000338  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080004cc  080004cc  0002002c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080004cc  080004cc  0002002c  2**0
                  CONTENTS
  4 .ARM          00000000  080004cc  080004cc  0002002c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080004cc  080004cc  0002002c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080004cc  080004cc  000104cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080004d0  080004d0  000104d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000002c  20000000  080004d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  2000002c  08000500  0002002c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000048  08000500  00020048  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000003cb  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000001db  00000000  00000000  00020427  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000a0  00000000  00000000  00020608  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000080  00000000  00000000  000206a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000010b4  00000000  00000000  00020728  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000c0d  00000000  00000000  000217dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00003c98  00000000  00000000  000223e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00026081  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000130  00000000  00000000  000260d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000002c 	.word	0x2000002c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080004b4 	.word	0x080004b4

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000030 	.word	0x20000030
 80001d0:	080004b4 	.word	0x080004b4

080001d4 <gpio_ini>:
static uint32_t* pGpio_B_Altf_H= (uint32_t*)(GPIO_B + GPIO_ALTFH);
static uint32_t* pGpio_B_Outype= (uint32_t*)(GPIO_B + GPIO_OUTYPE);
static uint32_t* pGpio_B_Pull_UpDown= (uint32_t*)(GPIO_B + GPIO_PULLDOWN);
void gpio_ini()
//Initialize the pin b8, b9 gpio a registers
{
 80001d4:	b480      	push	{r7}
 80001d6:	af00      	add	r7, sp, #0
	*pRcc_Ahb_En |= (1<<0);
 80001d8:	4b28      	ldr	r3, [pc, #160]	; (800027c <gpio_ini+0xa8>)
 80001da:	681b      	ldr	r3, [r3, #0]
 80001dc:	681a      	ldr	r2, [r3, #0]
 80001de:	4b27      	ldr	r3, [pc, #156]	; (800027c <gpio_ini+0xa8>)
 80001e0:	681b      	ldr	r3, [r3, #0]
 80001e2:	f042 0201 	orr.w	r2, r2, #1
 80001e6:	601a      	str	r2, [r3, #0]
	*pRcc_Apb1_En |=(1<<21);
 80001e8:	4b25      	ldr	r3, [pc, #148]	; (8000280 <gpio_ini+0xac>)
 80001ea:	681b      	ldr	r3, [r3, #0]
 80001ec:	681a      	ldr	r2, [r3, #0]
 80001ee:	4b24      	ldr	r3, [pc, #144]	; (8000280 <gpio_ini+0xac>)
 80001f0:	681b      	ldr	r3, [r3, #0]
 80001f2:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 80001f6:	601a      	str	r2, [r3, #0]
	*pGpioB_Cr |= (2<<16);
 80001f8:	4b22      	ldr	r3, [pc, #136]	; (8000284 <gpio_ini+0xb0>)
 80001fa:	681b      	ldr	r3, [r3, #0]
 80001fc:	681a      	ldr	r2, [r3, #0]
 80001fe:	4b21      	ldr	r3, [pc, #132]	; (8000284 <gpio_ini+0xb0>)
 8000200:	681b      	ldr	r3, [r3, #0]
 8000202:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000206:	601a      	str	r2, [r3, #0]
	*pGpioB_Cr |=(2<<18);
 8000208:	4b1e      	ldr	r3, [pc, #120]	; (8000284 <gpio_ini+0xb0>)
 800020a:	681b      	ldr	r3, [r3, #0]
 800020c:	681a      	ldr	r2, [r3, #0]
 800020e:	4b1d      	ldr	r3, [pc, #116]	; (8000284 <gpio_ini+0xb0>)
 8000210:	681b      	ldr	r3, [r3, #0]
 8000212:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8000216:	601a      	str	r2, [r3, #0]

	//set pin 8 and 9 as i2c
	*pGpio_B_Altf_H |= (4<<0);
 8000218:	4b1b      	ldr	r3, [pc, #108]	; (8000288 <gpio_ini+0xb4>)
 800021a:	681b      	ldr	r3, [r3, #0]
 800021c:	681a      	ldr	r2, [r3, #0]
 800021e:	4b1a      	ldr	r3, [pc, #104]	; (8000288 <gpio_ini+0xb4>)
 8000220:	681b      	ldr	r3, [r3, #0]
 8000222:	f042 0204 	orr.w	r2, r2, #4
 8000226:	601a      	str	r2, [r3, #0]
	*pGpio_B_Altf_H |= (4<<4);
 8000228:	4b17      	ldr	r3, [pc, #92]	; (8000288 <gpio_ini+0xb4>)
 800022a:	681b      	ldr	r3, [r3, #0]
 800022c:	681a      	ldr	r2, [r3, #0]
 800022e:	4b16      	ldr	r3, [pc, #88]	; (8000288 <gpio_ini+0xb4>)
 8000230:	681b      	ldr	r3, [r3, #0]
 8000232:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000236:	601a      	str	r2, [r3, #0]
	//set pin 8 and 9 in port b as open drain
	*pGpio_B_Outype |= (0x3<<8);
 8000238:	4b14      	ldr	r3, [pc, #80]	; (800028c <gpio_ini+0xb8>)
 800023a:	681b      	ldr	r3, [r3, #0]
 800023c:	681a      	ldr	r2, [r3, #0]
 800023e:	4b13      	ldr	r3, [pc, #76]	; (800028c <gpio_ini+0xb8>)
 8000240:	681b      	ldr	r3, [r3, #0]
 8000242:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8000246:	601a      	str	r2, [r3, #0]
	//set pin 8 and 9 in port b as pull up
	*pGpio_B_Pull_UpDown &= 0;
 8000248:	4b11      	ldr	r3, [pc, #68]	; (8000290 <gpio_ini+0xbc>)
 800024a:	681b      	ldr	r3, [r3, #0]
 800024c:	2200      	movs	r2, #0
 800024e:	601a      	str	r2, [r3, #0]
	*pGpio_B_Pull_UpDown |=(0x1<<16);
 8000250:	4b0f      	ldr	r3, [pc, #60]	; (8000290 <gpio_ini+0xbc>)
 8000252:	681b      	ldr	r3, [r3, #0]
 8000254:	681a      	ldr	r2, [r3, #0]
 8000256:	4b0e      	ldr	r3, [pc, #56]	; (8000290 <gpio_ini+0xbc>)
 8000258:	681b      	ldr	r3, [r3, #0]
 800025a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800025e:	601a      	str	r2, [r3, #0]
	*pGpio_B_Pull_UpDown |=(0x1<<18);
 8000260:	4b0b      	ldr	r3, [pc, #44]	; (8000290 <gpio_ini+0xbc>)
 8000262:	681b      	ldr	r3, [r3, #0]
 8000264:	681a      	ldr	r2, [r3, #0]
 8000266:	4b0a      	ldr	r3, [pc, #40]	; (8000290 <gpio_ini+0xbc>)
 8000268:	681b      	ldr	r3, [r3, #0]
 800026a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800026e:	601a      	str	r2, [r3, #0]
}
 8000270:	bf00      	nop
 8000272:	46bd      	mov	sp, r7
 8000274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000278:	4770      	bx	lr
 800027a:	bf00      	nop
 800027c:	20000000 	.word	0x20000000
 8000280:	20000008 	.word	0x20000008
 8000284:	20000004 	.word	0x20000004
 8000288:	2000000c 	.word	0x2000000c
 800028c:	20000010 	.word	0x20000010
 8000290:	20000014 	.word	0x20000014

08000294 <i2c_ini>:
static uint32_t* I2c_Ccr = (uint32_t*)(I2C+ I2C_CCR);//for clock time high and low
static uint32_t* I2c_Oar_1 = (uint32_t*)(I2C+ I2C_OAR1);

void i2c_ini()
//initialize i2c registers
{
 8000294:	b480      	push	{r7}
 8000296:	af00      	add	r7, sp, #0
	*I2c_Cr2 |= (0x000010);
 8000298:	4b12      	ldr	r3, [pc, #72]	; (80002e4 <i2c_ini+0x50>)
 800029a:	681b      	ldr	r3, [r3, #0]
 800029c:	681a      	ldr	r2, [r3, #0]
 800029e:	4b11      	ldr	r3, [pc, #68]	; (80002e4 <i2c_ini+0x50>)
 80002a0:	681b      	ldr	r3, [r3, #0]
 80002a2:	f042 0210 	orr.w	r2, r2, #16
 80002a6:	601a      	str	r2, [r3, #0]
	*I2c_Cr2 |=(1<<9);
 80002a8:	4b0e      	ldr	r3, [pc, #56]	; (80002e4 <i2c_ini+0x50>)
 80002aa:	681b      	ldr	r3, [r3, #0]
 80002ac:	681a      	ldr	r2, [r3, #0]
 80002ae:	4b0d      	ldr	r3, [pc, #52]	; (80002e4 <i2c_ini+0x50>)
 80002b0:	681b      	ldr	r3, [r3, #0]
 80002b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80002b6:	601a      	str	r2, [r3, #0]
	*I2c_Cr2 |=(1<<10);//generates
 80002b8:	4b0a      	ldr	r3, [pc, #40]	; (80002e4 <i2c_ini+0x50>)
 80002ba:	681b      	ldr	r3, [r3, #0]
 80002bc:	681a      	ldr	r2, [r3, #0]
 80002be:	4b09      	ldr	r3, [pc, #36]	; (80002e4 <i2c_ini+0x50>)
 80002c0:	681b      	ldr	r3, [r3, #0]
 80002c2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80002c6:	601a      	str	r2, [r3, #0]
	*I2c_Oar_1 |=(1<<0);//for address of slave
 80002c8:	4b07      	ldr	r3, [pc, #28]	; (80002e8 <i2c_ini+0x54>)
 80002ca:	681b      	ldr	r3, [r3, #0]
 80002cc:	681a      	ldr	r2, [r3, #0]
 80002ce:	4b06      	ldr	r3, [pc, #24]	; (80002e8 <i2c_ini+0x54>)
 80002d0:	681b      	ldr	r3, [r3, #0]
 80002d2:	f042 0201 	orr.w	r2, r2, #1
 80002d6:	601a      	str	r2, [r3, #0]
}
 80002d8:	bf00      	nop
 80002da:	46bd      	mov	sp, r7
 80002dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e0:	4770      	bx	lr
 80002e2:	bf00      	nop
 80002e4:	2000001c 	.word	0x2000001c
 80002e8:	20000028 	.word	0x20000028

080002ec <i2c_start>:
void i2c_start()
//start send address as master in i2c
{
 80002ec:	b480      	push	{r7}
 80002ee:	b083      	sub	sp, #12
 80002f0:	af00      	add	r7, sp, #0
	*I2c_Cr1 |=(1<<8);
 80002f2:	4b10      	ldr	r3, [pc, #64]	; (8000334 <i2c_start+0x48>)
 80002f4:	681b      	ldr	r3, [r3, #0]
 80002f6:	681a      	ldr	r2, [r3, #0]
 80002f8:	4b0e      	ldr	r3, [pc, #56]	; (8000334 <i2c_start+0x48>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000300:	601a      	str	r2, [r3, #0]
	while(1)
	{
		uint32_t temp = (*I2c_Sr1)&(0x1);
 8000302:	4b0d      	ldr	r3, [pc, #52]	; (8000338 <i2c_start+0x4c>)
 8000304:	681b      	ldr	r3, [r3, #0]
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	f003 0301 	and.w	r3, r3, #1
 800030c:	607b      	str	r3, [r7, #4]
		if(temp)
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	2b00      	cmp	r3, #0
 8000312:	d100      	bne.n	8000316 <i2c_start+0x2a>
	{
 8000314:	e7f5      	b.n	8000302 <i2c_start+0x16>
		{
			break;
 8000316:	bf00      	nop
		}
	}
	//sends slave address + read / write bit=0
	*I2c_Dr |= 0x11;
 8000318:	4b08      	ldr	r3, [pc, #32]	; (800033c <i2c_start+0x50>)
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	681a      	ldr	r2, [r3, #0]
 800031e:	4b07      	ldr	r3, [pc, #28]	; (800033c <i2c_start+0x50>)
 8000320:	681b      	ldr	r3, [r3, #0]
 8000322:	f042 0211 	orr.w	r2, r2, #17
 8000326:	601a      	str	r2, [r3, #0]





}
 8000328:	bf00      	nop
 800032a:	370c      	adds	r7, #12
 800032c:	46bd      	mov	sp, r7
 800032e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000332:	4770      	bx	lr
 8000334:	20000018 	.word	0x20000018
 8000338:	20000024 	.word	0x20000024
 800033c:	20000020 	.word	0x20000020

08000340 <i2c_recieve>:
uint8_t i2c_recieve()
//Receive data in i2c
{
 8000340:	b480      	push	{r7}
 8000342:	b083      	sub	sp, #12
 8000344:	af00      	add	r7, sp, #0
	uint8_t num = 0;
 8000346:	2300      	movs	r3, #0
 8000348:	71fb      	strb	r3, [r7, #7]
	//check if slave got the address
	while(!(*I2c_Sr1)&(0x10)){}
 800034a:	bf00      	nop
	*I2c_Cr1 &=~(1<<10);
 800034c:	4b13      	ldr	r3, [pc, #76]	; (800039c <i2c_recieve+0x5c>)
 800034e:	681b      	ldr	r3, [r3, #0]
 8000350:	681a      	ldr	r2, [r3, #0]
 8000352:	4b12      	ldr	r3, [pc, #72]	; (800039c <i2c_recieve+0x5c>)
 8000354:	681b      	ldr	r3, [r3, #0]
 8000356:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800035a:	601a      	str	r2, [r3, #0]
	*I2c_Sr1 &=~(1<<1);
 800035c:	4b10      	ldr	r3, [pc, #64]	; (80003a0 <i2c_recieve+0x60>)
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	681a      	ldr	r2, [r3, #0]
 8000362:	4b0f      	ldr	r3, [pc, #60]	; (80003a0 <i2c_recieve+0x60>)
 8000364:	681b      	ldr	r3, [r3, #0]
 8000366:	f022 0202 	bic.w	r2, r2, #2
 800036a:	601a      	str	r2, [r3, #0]
	//wait rxne =1
	while(1)
	{
		uint32_t temp = (*I2c_Sr1)&(1<<6);
 800036c:	4b0c      	ldr	r3, [pc, #48]	; (80003a0 <i2c_recieve+0x60>)
 800036e:	681b      	ldr	r3, [r3, #0]
 8000370:	681b      	ldr	r3, [r3, #0]
 8000372:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000376:	603b      	str	r3, [r7, #0]
		if(temp)
 8000378:	683b      	ldr	r3, [r7, #0]
 800037a:	2b00      	cmp	r3, #0
 800037c:	d0f6      	beq.n	800036c <i2c_recieve+0x2c>
		{
			num |= (*I2c_Dr)&(0xFF);
 800037e:	4b09      	ldr	r3, [pc, #36]	; (80003a4 <i2c_recieve+0x64>)
 8000380:	681b      	ldr	r3, [r3, #0]
 8000382:	681b      	ldr	r3, [r3, #0]
 8000384:	b2da      	uxtb	r2, r3
 8000386:	79fb      	ldrb	r3, [r7, #7]
 8000388:	4313      	orrs	r3, r2
 800038a:	71fb      	strb	r3, [r7, #7]
			return num;
 800038c:	79fb      	ldrb	r3, [r7, #7]
		}
	}
}
 800038e:	4618      	mov	r0, r3
 8000390:	370c      	adds	r7, #12
 8000392:	46bd      	mov	sp, r7
 8000394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000398:	4770      	bx	lr
 800039a:	bf00      	nop
 800039c:	20000018 	.word	0x20000018
 80003a0:	20000024 	.word	0x20000024
 80003a4:	20000020 	.word	0x20000020

080003a8 <i2c_stop>:
void i2c_stop()
//stops i2c
{
 80003a8:	b480      	push	{r7}
 80003aa:	af00      	add	r7, sp, #0
	//nack
	*I2c_Cr1 &=~(1<<10);
 80003ac:	4b0e      	ldr	r3, [pc, #56]	; (80003e8 <i2c_stop+0x40>)
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	681a      	ldr	r2, [r3, #0]
 80003b2:	4b0d      	ldr	r3, [pc, #52]	; (80003e8 <i2c_stop+0x40>)
 80003b4:	681b      	ldr	r3, [r3, #0]
 80003b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80003ba:	601a      	str	r2, [r3, #0]
	//stop
	*I2c_Cr1 |=(1<<9);
 80003bc:	4b0a      	ldr	r3, [pc, #40]	; (80003e8 <i2c_stop+0x40>)
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	681a      	ldr	r2, [r3, #0]
 80003c2:	4b09      	ldr	r3, [pc, #36]	; (80003e8 <i2c_stop+0x40>)
 80003c4:	681b      	ldr	r3, [r3, #0]
 80003c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80003ca:	601a      	str	r2, [r3, #0]
	//addr =0
	*I2c_Sr1 &=~(1<<1);
 80003cc:	4b07      	ldr	r3, [pc, #28]	; (80003ec <i2c_stop+0x44>)
 80003ce:	681b      	ldr	r3, [r3, #0]
 80003d0:	681a      	ldr	r2, [r3, #0]
 80003d2:	4b06      	ldr	r3, [pc, #24]	; (80003ec <i2c_stop+0x44>)
 80003d4:	681b      	ldr	r3, [r3, #0]
 80003d6:	f022 0202 	bic.w	r2, r2, #2
 80003da:	601a      	str	r2, [r3, #0]

}
 80003dc:	bf00      	nop
 80003de:	46bd      	mov	sp, r7
 80003e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e4:	4770      	bx	lr
 80003e6:	bf00      	nop
 80003e8:	20000018 	.word	0x20000018
 80003ec:	20000024 	.word	0x20000024

080003f0 <main>:
#include "i2c.h"


int main(void)
//Receive 1 byte from slave
{
 80003f0:	b580      	push	{r7, lr}
 80003f2:	b082      	sub	sp, #8
 80003f4:	af00      	add	r7, sp, #0
	uint8_t number;
	gpio_ini();
 80003f6:	f7ff feed 	bl	80001d4 <gpio_ini>
	i2c_ini();
 80003fa:	f7ff ff4b 	bl	8000294 <i2c_ini>
	i2c_start();
 80003fe:	f7ff ff75 	bl	80002ec <i2c_start>
	number = i2c_recieve();
 8000402:	f7ff ff9d 	bl	8000340 <i2c_recieve>
 8000406:	4603      	mov	r3, r0
 8000408:	71fb      	strb	r3, [r7, #7]
	i2c_stop();
 800040a:	f7ff ffcd 	bl	80003a8 <i2c_stop>
 800040e:	2300      	movs	r3, #0

}
 8000410:	4618      	mov	r0, r3
 8000412:	3708      	adds	r7, #8
 8000414:	46bd      	mov	sp, r7
 8000416:	bd80      	pop	{r7, pc}

08000418 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000418:	480d      	ldr	r0, [pc, #52]	; (8000450 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800041a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800041c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000420:	480c      	ldr	r0, [pc, #48]	; (8000454 <LoopForever+0x6>)
  ldr r1, =_edata
 8000422:	490d      	ldr	r1, [pc, #52]	; (8000458 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000424:	4a0d      	ldr	r2, [pc, #52]	; (800045c <LoopForever+0xe>)
  movs r3, #0
 8000426:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000428:	e002      	b.n	8000430 <LoopCopyDataInit>

0800042a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800042a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800042c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800042e:	3304      	adds	r3, #4

08000430 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000430:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000432:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000434:	d3f9      	bcc.n	800042a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000436:	4a0a      	ldr	r2, [pc, #40]	; (8000460 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000438:	4c0a      	ldr	r4, [pc, #40]	; (8000464 <LoopForever+0x16>)
  movs r3, #0
 800043a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800043c:	e001      	b.n	8000442 <LoopFillZerobss>

0800043e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800043e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000440:	3204      	adds	r2, #4

08000442 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000442:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000444:	d3fb      	bcc.n	800043e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000446:	f000 f811 	bl	800046c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800044a:	f7ff ffd1 	bl	80003f0 <main>

0800044e <LoopForever>:

LoopForever:
  b LoopForever
 800044e:	e7fe      	b.n	800044e <LoopForever>
  ldr   r0, =_estack
 8000450:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000454:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000458:	2000002c 	.word	0x2000002c
  ldr r2, =_sidata
 800045c:	080004d4 	.word	0x080004d4
  ldr r2, =_sbss
 8000460:	2000002c 	.word	0x2000002c
  ldr r4, =_ebss
 8000464:	20000048 	.word	0x20000048

08000468 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000468:	e7fe      	b.n	8000468 <ADC_IRQHandler>
	...

0800046c <__libc_init_array>:
 800046c:	b570      	push	{r4, r5, r6, lr}
 800046e:	4d0d      	ldr	r5, [pc, #52]	; (80004a4 <__libc_init_array+0x38>)
 8000470:	4c0d      	ldr	r4, [pc, #52]	; (80004a8 <__libc_init_array+0x3c>)
 8000472:	1b64      	subs	r4, r4, r5
 8000474:	10a4      	asrs	r4, r4, #2
 8000476:	2600      	movs	r6, #0
 8000478:	42a6      	cmp	r6, r4
 800047a:	d109      	bne.n	8000490 <__libc_init_array+0x24>
 800047c:	4d0b      	ldr	r5, [pc, #44]	; (80004ac <__libc_init_array+0x40>)
 800047e:	4c0c      	ldr	r4, [pc, #48]	; (80004b0 <__libc_init_array+0x44>)
 8000480:	f000 f818 	bl	80004b4 <_init>
 8000484:	1b64      	subs	r4, r4, r5
 8000486:	10a4      	asrs	r4, r4, #2
 8000488:	2600      	movs	r6, #0
 800048a:	42a6      	cmp	r6, r4
 800048c:	d105      	bne.n	800049a <__libc_init_array+0x2e>
 800048e:	bd70      	pop	{r4, r5, r6, pc}
 8000490:	f855 3b04 	ldr.w	r3, [r5], #4
 8000494:	4798      	blx	r3
 8000496:	3601      	adds	r6, #1
 8000498:	e7ee      	b.n	8000478 <__libc_init_array+0xc>
 800049a:	f855 3b04 	ldr.w	r3, [r5], #4
 800049e:	4798      	blx	r3
 80004a0:	3601      	adds	r6, #1
 80004a2:	e7f2      	b.n	800048a <__libc_init_array+0x1e>
 80004a4:	080004cc 	.word	0x080004cc
 80004a8:	080004cc 	.word	0x080004cc
 80004ac:	080004cc 	.word	0x080004cc
 80004b0:	080004d0 	.word	0x080004d0

080004b4 <_init>:
 80004b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004b6:	bf00      	nop
 80004b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004ba:	bc08      	pop	{r3}
 80004bc:	469e      	mov	lr, r3
 80004be:	4770      	bx	lr

080004c0 <_fini>:
 80004c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004c2:	bf00      	nop
 80004c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004c6:	bc08      	pop	{r3}
 80004c8:	469e      	mov	lr, r3
 80004ca:	4770      	bx	lr
